#==============================================================================================#
#                                            Types                                             #
#==============================================================================================#

"""
`Inexact = Union{AbstractFloat}`\n
The `Inexact` number type union.
"""
Inexact = Union{AbstractFloat}

export Inexact

#----------------------------------------------------------------------------------------------#
#                               engineConcept{ùóß<:AbstractFloat}                                #
#----------------------------------------------------------------------------------------------#

"""
`struct engineConcept{ùóß<:AbstractFloat}`\n
Engine proportion parameters structure.
"""
struct engineConcept{ùóß<:AbstractFloat}
    rSD::ùóß
    rLR::ùóß
    # Inner constructors
    engineConcept(x::engineConcept{ùó´}) where ùó´ = new{ùó´}(x.rSD, x.rLR)
    engineConcept(rsd::ùóß, rlr::ùóß) where ùóß<:AbstractFloat = new{ùóß}(rsd, rlr)
    engineConcept(rsd::ùó¶, rlr::ùóß) where {ùó¶<:AbstractFloat, ùóß<:AbstractFloat} = begin
        engineConcept(promote(rsd, rlr)...)
    end
end

# Outer constructors
(::Type{engineConcept{ùóß}})(s::engineConcept{ùó¶}) where {ùó¶, ùóß} = begin
    engineConcept(ùóß(s.rSD), ùóß(s.rLR))
end

# Methods
rSD(x::engineConcept{ùóß}) where ùóß = x.rSD
rDS(x::engineConcept{ùóß}) where ùóß = one(ùóß) / x.rSD
rLR(x::engineConcept{ùóß}) where ùóß = x.rLR
rRL(x::engineConcept{ùóß}) where ùóß = one(ùóß) / x.rLR



## struct engine{ùóß<:AbstractFloat}
##     id::AbstractString
##     
## end

